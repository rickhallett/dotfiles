[core]
    editor = vim
    excludesfile = ~/.gitignore
    pager = less -F -X
[color]
    ui = true
[commit]
    verbose = true
[diff]
    algorithm = patience
[merge]
    tool = vimdiff
    ff = false
[mergetool]
    keepBackup = false
[pull]
    ff = true
    ff-only = true
[alias]
    fap = fetch --all --prune --tags

# This checks that the local remote ref is up to date before forcing the update
    please = push --force-with-lease

# The replacement for `git-up`
    up = pull --rebase --autostash

    root = rev-parse --show-toplevel
    current-branch = rev-parse --abbrev-ref HEAD
    current-remote = "!f() {                                             \
        if [ -f ~/.config/hub ]; then                                    \
            local remote=$(awk ' /user:/ { print $NF } ' ~/.config/hub); \
            git config gitflow.origin ${remote:-origin};                 \
        fi;                                                              \
                                                                         \
        echo ${remote:-origin};                                          \
    }; f"
    remote-branch = rev-parse --abbrev-ref --symbolic-full-name @{u}

    ff = flow feature
    ffs = flow feature start
    fff = flow feature finish
    ffp = flow feature publish
    fr = flow release
    frs = flow release start
    frf = flow release finish

    ca = commit --all
    cam = commit --amend --no-edit
    caam = commit --all --amend --no-edit

# The first commit cannot be rebased so it's nice to have it empty
    new = "!git init && git commit -m 'Initial commit' --allow-empty"

# Make ignoring files easy
# https://github.com/caius/zshrc/blob/master/dotfiles/gitconfig#L72
# http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | awk '/^h / { sub(/^h /, ""); print $0 }'"

    standup = "!git log --since yesterday --oneline --author \"$(git config user.name)\""

# This performs a shell command bound to a git alias.
# See: http://blogs.atlassian.com/2014/10/advanced-git-aliases/
    flow-push = "!f() {                           \
        local remote=${1:-$(git current-remote)}; \
        git push ${remote} master;                \
        git push ${remote} develop;               \
        git push ${remote} --tags;                \
    }; f"

    flow-quick-release = "!f() {                                                     \
        local release=${1:?Must provide tag as only argument};                       \
        git checkout master                                                       && \
            git pull --ff                                                         && \
            git checkout develop                                                  && \
            git pull --ff                                                         && \
            git flow release start ${release}                                     && \
            git flow release finish --nobackmerge --message ${release} ${release} && \
            git checkout develop;                                                    \
    }; f"

    flow-fix = "!f() {                         \
        local remote=$(git current-remote);    \
        git remote set-head ${remote} develop; \
    }; f"                                      \

    fixie = "!f() {\
        git commit --fixup $(git log --pretty=%h --grep=\"$*\");\
    }; f"

    to-gitlab = "!f() {                                     \
        (                                                   \
            cd \"$(git root)\";                             \
            sed -i -e s/github.com/gitlab.com/ .git/config; \
        )                                                   \
    }; f"

    branches = for-each-ref --sort=-committerdate --format='%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)' refs/heads refs/remotes
[push]
    default = tracking
[filter "clean_ipynb"]
    # This will strip output from the notebooks, making commits clean.
    # I'm choosing to disable it as the output is valuable.
    # clean = jq --indent 1 --monochrome-output '. + if .metadata.git.suppress_outputs | not then { cells: [.cells[] | . + if .cell_type == \"code\" then { outputs: [], execution_count: null } else {} end ] } else {} end'
    clean = cat
    smudge = cat

# vim: set ai et sw=4 syntax=gitconfig :
