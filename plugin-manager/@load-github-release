#!/usr/bin/zsh
#
# This loads a dependency from a github release.
# This will download the file to the xdg cache.
#
# This takes the most recent release that matches the patterns, downloads and decompresses it.
# Then it will put the root folder on the path, and add any autocomplete folder to autocomplete.
#
# This uses tags to identify which release to use.
# The terms: tag takes a comma separated list of words to look for in the filename of the release.
# The exec: tag takes a literal command to execute after loading the release.
#
# Example:
#
# @load github-release sharkdp/fd terms:x86_64,linux,musl
# @load github-release ajeetdsouza/zoxide terms:x86_64,linux,musl exec:'eval "$(zoxide init zsh)"'
#
# The commands to execute will be echoed to stdout.

set -euo pipefail

readonly PLUGIN_FOLDER="${0:A:h}"

readonly RELEASE_CACHE_FOLDER="${XDG_CACHE_DIR:-${HOME}/.cache}/dotfiles/repos/releases"

readonly REPO_NAME="${1?You must provide the repo to use}"
readonly FOLDER_NAME="${RELEASE_CACHE_FOLDER}/${REPO_NAME:gs#/#--#}"
shift

TERMS=""
EXEC=""
for argument in "$@"; do
    case $argument in
        terms:*)
            TERMS="${argument/*:}"
            ;;
        exec:*)
            EXEC="${argument/*:}"
            ;;
        *)
            echo "Unknown argument: ${argument}" >&2
            exit 1
            ;;
    esac
done

(
    if [ ! -e "${FOLDER_NAME}" ]; then
        if [ ! -e "${RELEASE_CACHE_FOLDER}" ]; then
            mkdir -p "${RELEASE_CACHE_FOLDER}"
        fi

        readonly TEMP_DIR="$(mktemp -d)"
        trap "rm -rf '${TEMP_DIR}'" HUP INT QUIT

        readonly RELEASE_URL="$(curl https://api.github.com/repos/${REPO_NAME}/releases/latest | python ${PLUGIN_FOLDER}/github_release.py "${TERMS}")"
        (
            cd "${TEMP_DIR}"
            wget "${RELEASE_URL}"
            tar xzf *.tar.gz
            rm *.tar.gz

            if [ $(ls | wc -l) -gt 1 ]; then
                mkdir "${FOLDER_NAME}"
                mv * "${FOLDER_NAME}"
            else
                FILE="$(ls)"
                if [ -d "${FILE}" ]; then
                    mv "${FILE}" "${FOLDER_NAME}"
                else
                    mkdir "${FOLDER_NAME}"
                    mv "${FILE}" "${FOLDER_NAME}"
                fi
            fi
        )
    fi
) >&2

"${PLUGIN_FOLDER}/@load" directory "${FOLDER_NAME}"
if [ -n "${EXEC}" ]; then
    echo "${EXEC}"
fi
