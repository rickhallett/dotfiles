#!/usr/bin/zsh
#
# This loads a dependency from a github release.
# This will download the file to the xdg cache.
#
# This takes the most recent release that matches the patterns, downloads and decompresses it.
# Then it will put the root folder on the path, and add any autocomplete folder to autocomplete.
#
# This uses tags to identify which release to use.
# The terms: tag takes a comma separated list of words to look for in the filename of the release.
# The exec: tag takes a literal command to execute after loading the release.
#
# Example:
#
# @load github-release sharkdp/fd terms:x86_64,linux,musl
# @load github-release ajeetdsouza/zoxide terms:x86_64,linux,musl exec:'eval "$(zoxide init zsh)"'
#
# The commands to execute will be echoed to stdout.

set -euo pipefail

readonly PLUGIN_FOLDER="${0:A:h:h}"
readonly DOTFILES_FOLDER="${0:A:h:h:h}"

source "${PLUGIN_FOLDER}/lib.sh"
source "${DOTFILES_FOLDER}/script/lib.sh"

readonly REPO_NAME="${1?You must provide the repo to use}"
shift

readonly FOLDER_NAME="$(github_release_folder "${REPO_NAME}")"
readonly LOG_FILE="$(log_file "${FOLDER_NAME}")"
readonly TERMS="$(read_tag terms "$@")"
readonly EXEC="$(read_tag exec "$@")"

(
    if [ ! -e "${FOLDER_NAME}" ]; then
        readonly TEMP_DIR="$(mktemp -d)"
        trap "rm -rf '${TEMP_DIR}'" HUP INT QUIT

        readonly RELEASE_URL="$(curl https://api.github.com/repos/${REPO_NAME}/releases/latest | python ${PLUGIN_FOLDER}/github_release.py "${TERMS}")"
        (
            cd "${TEMP_DIR}"
            wget "${RELEASE_URL}"
            tar xzf *.tar.gz
            rm *.tar.gz

            if [ $(ls | wc -l) -gt 1 ]; then
                mkdir "${FOLDER_NAME}"
                mv * "${FOLDER_NAME}"
            else
                FILE="$(ls)"
                if [ -d "${FILE}" ]; then
                    mv "${FILE}" "${FOLDER_NAME}"
                else
                    mkdir "${FOLDER_NAME}"
                    mv "${FILE}" "${FOLDER_NAME}"
                fi
            fi
        )
    fi
) >"${LOG_FILE}.out" 2>"${LOG_FILE}.err"
if [ $? -eq 0 ]; then
    success "loaded github release ${REPO_NAME}" >&2
else
    fail "loaded github release ${REPO_NAME}" >&2
fi

"${PLUGIN_FOLDER}/@load" directory "${FOLDER_NAME}"
if [ -n "${EXEC}" ]; then
    echo "${EXEC}"
fi
