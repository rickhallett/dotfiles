" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1

if exists('py2') && has('python')
elseif has('python3')
endif


function s:Main() abort
    call s:LoadPlugins()
    call s:LoadKeymaps()
    call s:LoadTags()

    autocmd! VimEnter * :call <SID>LoadCustomSettings()
endfunction

" This allows you to issue a command that uses the names of all of the buffer
" files. For example:
" :exe '! git add ' . join(BuffersList(), ' ')
" Would add the file corresponding to every open buffer to git.
" See http://stackoverflow.com/a/271709/170865
function! BuffersList() abort
    let all = range(0, bufnr('$'))
    let result = []

    for b in all
        if buflisted(b)
            call add(result, bufname(b))
        endif
    endfor

    return result
endfunction


function s:LoadPlugins() abort
    if s:CannotLoadPlugins()
        return 0
    endif

    call s:PrepareForPluginLoad()

    if s:CanInstallPluginLoader() && s:PluginLoaderMissing()
        call s:InstallPluginLoader()
    endif

    call plug#begin('~/.vim/plugged')

    call s:RegisterPlugins()

    if s:PluginsMissing()
        PlugInstall
    endif

    call plug#helptags()
    call plug#end()

    call s:ConfigurePlugins()

    return 1
endfunction

function s:CannotLoadPlugins() abort
    return version <= 701
endfunction

function s:CanInstallPluginLoader() abort
    " Can only install the plugin loader when vim is starting
    return has('vim_starting')
endfunction

function s:PluginLoaderMissing() abort
    return !filereadable(expand('~/.vim/autoload/plug.vim'))
endfunction

function s:CanUsePython() abort
    return has('python') || has('python3')
endfunction

function s:PluginsMissing() abort
    " The g:plugs map maps the plugin name to the settings for it.
    " The most relevant setting for this is the 'dir' setting which is the
    " destination folder.
    " Example (truncated) output of ':echo g:plugs':
    " {'vim-surround': {'uri': 'https://github.com/tpope/vim-surround.git', 'dir': '/home/matthew/.vim/plugged/vim-surround/', 'frozen': 0, 'branch': 'master'},...

    for spec in values(g:plugs)
        if !isdirectory(spec.dir)
            return 1
        endif
    endfor

    return 0
endfunction

function s:PrepareForPluginLoad() abort
    set completeopt=menuone

    let g:NumberToggleTrigger="<leader>n"

    let g:python3_host_prog = 'python3'

    call s:ConfigureAck()
endfunction

function s:InstallPluginLoader() abort
    echo "Installing Vim Plug.."
    echo ""
    silent !mkdir --parents ~/.vim/autoload
    silent !curl --fail --location --output ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endfunction

function s:RegisterPlugins() abort
    " Each of these is registered in the g:plugs map.
    Plug 'https://github.com/altercation/vim-colors-solarized.git'
    Plug 'https://github.com/flazz/vim-colorschemes.git'
    Plug 'https://github.com/ryanoasis/vim-devicons.git'

    Plug 'https://github.com/tpope/vim-dispatch.git'

    Plug 'https://github.com/sheerun/vim-polyglot.git'
    Plug 'https://github.com/jrozner/vim-antlr.git'
    Plug 'https://github.com/lervag/vimtex.git'
    Plug 'https://github.com/vim-scripts/bnf.vim.git'

    Plug 'https://github.com/bronson/vim-visual-star-search.git'
    Plug 'https://github.com/davidhalter/jedi-vim.git'
    if executable('task')
        let l:out = system('python -c "import tasklib"')
        unlet l:out
        if v:shell_error == 0
            Plug 'https://github.com/blindFS/vim-taskwarrior.git'
            Plug 'https://github.com/tbabej/taskwiki.git'
            Plug 'https://github.com/vimwiki/vimwiki.git'
        endif
    endif
    Plug 'https://github.com/godlygeek/tabular.git'
    Plug 'https://github.com/guns/vim-sexp.git'
    Plug 'https://github.com/jeffkreeftmeijer/vim-numbertoggle.git'
    Plug 'https://github.com/junegunn/fzf.git', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
    Plug 'https://github.com/junegunn/rainbow_parentheses.vim.git'
    Plug 'https://github.com/junegunn/tmux-complete.vim.git'
    Plug 'https://github.com/majutsushi/tagbar.git'
    Plug 'https://github.com/mileszs/ack.vim.git'
    Plug 'https://github.com/powerman/vim-plugin-AnsiEsc.git'
    Plug 'https://github.com/racer-rust/vim-racer.git'
    Plug 'https://github.com/scrooloose/nerdtree.git'
    Plug 'https://github.com/sjl/gundo.vim.git'
    Plug 'https://github.com/tpope/vim-commentary.git'
    Plug 'https://github.com/tpope/vim-fireplace.git'
    Plug 'https://github.com/tpope/vim-fugitive.git'
    Plug 'https://github.com/tpope/vim-repeat.git'
    Plug 'https://github.com/tpope/vim-salve.git'
    Plug 'https://github.com/tpope/vim-sensible.git'
    Plug 'https://github.com/tpope/vim-sexp-mappings-for-regular-people.git'
    Plug 'https://github.com/tpope/vim-surround.git'
    Plug 'https://github.com/tpope/vim-unimpaired.git'
    Plug 'https://github.com/vim-scripts/kwbdi.vim.git'
    Plug 'https://github.com/w0rp/ale.git'

    Plug 'https://gitlab.com/matthewfranglen/vim-mf-defaults.git'
    Plug 'https://github.com/matthewfranglen/vim-nerdtree-direnter.git'
    Plug 'https://gitlab.com/matthewfranglen/vim-static-import.git'
endfunction

function s:ConfigurePlugins() abort
    call s:ConfigureAle()
    call s:ConfigureColors()
    call s:ConfigureEasytags()
    call s:ConfigureEclim()
    call s:ConfigureFZF()
    call s:ConfigureJavaOmniComplete()
    call s:ConfigureJedi()
    call s:ConfigureMarkdown()
    call s:ConfigureNERDTree()
    call s:ConfigurePolyglot()
    call s:ConfigureSyntastic()
    call s:ConfigureTex()

    if s:CanUsePython()
        call s:ConfigurePowerline()
    endif
endfunction

function s:ConfigureAck() abort
    if executable('ag')
        let g:ackprg = 'ag --vimgrep'
    endif

    if executable('rg')
        let g:ackprg = 'rg --vimgrep --no-heading'
    endif
endfunction

function s:ConfigureAle() abort
    let g:ale_fix_on_save = 1
endfunction

function s:ConfigureColors() abort
    " Convince Vim it can use 256 colors inside Gnome Terminal.
    " Needs CSApprox plugin
    set t_Co=256
    set background=dark

    let g:solarized_termcolors = 256
    colorscheme solarized
endfunction

function s:ConfigureEasytags() abort
    " Update local tags files in preference to the global one
    let g:easytags_dynamic_files = 1
    let g:easytags_async = 1
endfunction

function s:ConfigureEclim() abort
    let g:EclimJavascriptLintEnabled = 0
    let g:EclimJavaSearchSingleResult = 'tabnew'
endfunction

function s:ConfigureFZF() abort
    nnoremap <C-p> :FZF<CR>
endfunction

function s:ConfigureJedi() abort
    let g:jedi#use_tabs_not_buffers = 1
    let g:jedi#show_call_signatures = 2
    let g:jedi#popup_on_dot = 0
endfunction

function s:ConfigureJavaOmniComplete() abort
    let g:EclimCompletionMethod = 'omnifunc'
endfunction

function s:ConfigureMarkdown() abort
    " Set markdown filetype and spelling
    " Required otherwise .md is modulo-2 filetype
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufRead,BufNewFile *.md setlocal spell
endfunction

function s:ConfigureNERDTree() abort
    " http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
    let g:NERDTreeIgnore = ['\.pyc$[[file]]', '__pycache__$[[dir]]']

    " http://stackoverflow.com/questions/8680752/how-to-open-a-file-in-new-tab-by-default-in-nerdtree
    let g:NERDTreeMapOpenInTab='<ENTER>'
endfunction

function s:ConfigurePolyglot() abort
    let g:polyglot_disabled = ['latex']
endfunction

function s:ConfigureSyntastic() abort
    let g:syntastic_python_checkers = ['python', 'pyflakes', 'pep8', 'pylint']
    let g:syntastic_javascript_checkers = ['eslint']
endfunction

function s:ConfigureTex() abort
    let g:tex_flavor = 'latex'
endfunction

function s:ConfigurePowerline() abort
    set rtp+=~/.local/lib/python*/site-packages/powerline/bindings/vim
endfunction

function s:LoadKeymaps() abort
    " Map leader to space.
    let g:mapleader = "\<Space>"

    " This needs to be global as using let inside a function will implicitly
    " change it to be local to the function.  Within a function these two
    " statements are equivalent:
    "
    " let a = "b"
    " let l:a = "b"
    "
    " Outside a function these two statements are equivalent:
    "
    " let a = "b"
    " let g:a = "b"

    " Fugitive bindings
    nnoremap <unique> <leader>gs :Gstatus<CR>
    nnoremap <unique> <leader>gc :Gcommit<CR>
    noremap <unique> <script> <leader>gd :call <SID>ShowGitDiff()<CR>

    " Toggle Tags with <F8>, Nerdtree with <F7>
    nmap <F7> :NERDTreeToggle<CR>:only<CR>
    nmap <F8> :TagbarToggle<CR>
endfunction

function s:ShowGitDiff() abort
    execute g:ExecuteInShell('git diff')
    set syntax=diff
endfunction

function s:LoadCustomSettings() abort
    if filereadable("./vimrc")
        source ./vimrc
    endif
endfunction

function s:LoadTags() abort
    set tags=$HOME/.vimtags_jdk,./tags
endfunction

call s:Main()
